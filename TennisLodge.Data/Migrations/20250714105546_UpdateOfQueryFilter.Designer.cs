// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TennisLodge.Data;

#nullable disable

namespace TennisLodge.Data.Migrations
{
    [DbContext(typeof(TennisLodgeDbContext))]
    [Migration("20250714105546_UpdateOfQueryFilter")]
    partial class UpdateOfQueryFilter
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TennisLodge.Data.Models.Accommodation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key for the Accommodation entity");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("Address or description of the accommodation");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("City where the accommodation is located");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("Date when the offer was created");

                    b.Property<string>("HostUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign key to the user offering the accommodation");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasComment("Indicates if the accommodation is currently available");

                    b.Property<int>("MaxGuests")
                        .HasColumnType("int")
                        .HasComment("Maximum number of guests that can be hosted");

                    b.Property<string>("Notes")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("Optional description or notes about the accommodation");

                    b.HasKey("Id");

                    b.HasIndex("HostUserId");

                    b.ToTable("Accommodations", t =>
                        {
                            t.HasComment("Accommodation offered by a user for hosting players");
                        });
                });

            modelBuilder.Entity("TennisLodge.Data.Models.AccommodationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key of the accommodation request");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()")
                        .HasComment("Date when the request was created");

                    b.Property<string>("GuestUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign key to the user requesting accommodation");

                    b.Property<bool>("IsFulfilled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Indicates whether the request has been fulfilled or matched");

                    b.Property<string>("Notes")
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)")
                        .HasComment("Additional notes or requests from the guest");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("int")
                        .HasComment("Number of people (including the guest) needing accommodation");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the tournament the request is for");

                    b.HasKey("Id");

                    b.HasIndex("GuestUserId");

                    b.HasIndex("TournamentId");

                    b.ToTable("AccommodationRequests", t =>
                        {
                            t.HasComment("Request from a user to be hosted during a tournament");
                        });
                });

            modelBuilder.Entity("TennisLodge.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("User's city of residence");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("User's first name");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("User's last name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", null, t =>
                        {
                            t.HasComment("Extended Identity user with additional profile data");
                        });

                    b.HasData(
                        new
                        {
                            Id = "7699db7d-964f-4782-8209-d76562e0fece",
                            AccessFailedCount = 0,
                            City = "Sofia",
                            ConcurrencyStamp = "4d2d24cc-4fd3-4e75-a94f-194ae5778614",
                            Email = "admin@tennislodge.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@TENNISLODGE.COM",
                            NormalizedUserName = "ADMIN@TENNISLODGE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEA+H/9CsJXDgvDVR9SSq9VLj64RDFsxGb5Fmeg6JTrUeDG4ACXV4g7oQ8EN82HyeJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48cbe3f6-a5ba-4c94-be4d-04244d9b25ce",
                            TwoFactorEnabled = false,
                            UserName = "admin@tennislodge.com"
                        });
                });

            modelBuilder.Entity("TennisLodge.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Primary key identifier of the category");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasComment("Name of the category");

                    b.HasKey("Id");

                    b.ToTable("Categories", t =>
                        {
                            t.HasComment("Category of tournaments");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "ATP 250"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Challenger"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ITF Futures"
                        },
                        new
                        {
                            Id = 4,
                            Name = "National - Under 10"
                        },
                        new
                        {
                            Id = 5,
                            Name = "National - Under 12"
                        },
                        new
                        {
                            Id = 6,
                            Name = "National - Under 14"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Tennis Europe - Under 12"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Tennis Europe - Under 14"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Tennis Europe - Under 16"
                        },
                        new
                        {
                            Id = 10,
                            Name = "ITF Juniors"
                        });
                });

            modelBuilder.Entity("TennisLodge.Data.Models.PlayerProfile", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Primary key and foreign key to ApplicationUser");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2")
                        .HasComment("Player's date of birth");

                    b.Property<string>("DominantHand")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasComment("Player's dominant hand (left/right)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Player's nationality");

                    b.Property<string>("PreferredSurface")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)")
                        .HasComment("Player's preferred playing surface");

                    b.Property<int?>("Ranking")
                        .HasColumnType("int")
                        .HasComment("Player's ranking, if available");

                    b.HasKey("UserId");

                    b.ToTable("PlayerProfiles", t =>
                        {
                            t.HasComment("Player-specific profile with athletic data");
                        });
                });

            modelBuilder.Entity("TennisLodge.Data.Models.Tournament", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier for the tournament");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasComment("Foreign key to the tournament category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("Detailed description of the tournament");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasComment("End date of the tournament");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Optional URL for the tournament image");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Soft delete flag, true if tournament is deleted");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("City or venue where the tournament takes place");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Official name of the tournament");

                    b.Property<string>("Organizer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Name of the organizer or organizing body");

                    b.Property<string>("PublisherId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign key to the user who published the tournament");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasComment("Start date of the tournament");

                    b.Property<string>("Surface")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Surface type");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Tournaments", t =>
                        {
                            t.HasComment("Tournament in the system");
                        });

                    b.HasData(
                        new
                        {
                            Id = new Guid("8f19c979-40c2-4cb8-8af0-d061456245bd"),
                            CategoryId = 1,
                            Description = "Professional indoor hard court tournament held annually in Sofia, Bulgaria.",
                            EndDate = new DateOnly(2025, 10, 7),
                            ImageUrl = "/images/atp250.jpg",
                            IsDeleted = false,
                            Location = "Sofia, Arena Armeec",
                            Name = "Sofia Open",
                            Organizer = "Bulgarian Tennis Federation",
                            PublisherId = "7699db7d-964f-4782-8209-d76562e0fece",
                            StartDate = new DateOnly(2025, 10, 1),
                            Surface = "Hard (Indoor)"
                        },
                        new
                        {
                            Id = new Guid("7b6d0baf-2a39-41d7-bc2a-e5713b302baf"),
                            CategoryId = 2,
                            Description = "Challenger-level clay court tournament attracting top Eastern European players.",
                            EndDate = new DateOnly(2025, 6, 16),
                            ImageUrl = "/images/ChallengerTour.jpg",
                            IsDeleted = false,
                            Location = "Plovdiv, Tennis Complex",
                            Name = "Plovdiv Clay Cup",
                            Organizer = "Plovdiv Tennis Club",
                            PublisherId = "7699db7d-964f-4782-8209-d76562e0fece",
                            StartDate = new DateOnly(2025, 6, 10),
                            Surface = "Clay"
                        },
                        new
                        {
                            Id = new Guid("ea09c21c-62f5-4ee2-99bb-d63f682c5ee3"),
                            CategoryId = 4,
                            Description = "National tournament for kids under 10, designed to encourage early development.",
                            EndDate = new DateOnly(2025, 5, 4),
                            ImageUrl = "/images/BulgarianFederation.jpg",
                            IsDeleted = false,
                            Location = "Burgas Tennis Club",
                            Name = "Burgas U10 Open",
                            Organizer = "Burgas Youth Sports",
                            PublisherId = "7699db7d-964f-4782-8209-d76562e0fece",
                            StartDate = new DateOnly(2025, 5, 2),
                            Surface = "Clay"
                        },
                        new
                        {
                            Id = new Guid("e260f1e1-b12b-4e2b-87c8-e2df1f388377"),
                            CategoryId = 5,
                            Description = "National ranking tournament for players under 12 years old.",
                            EndDate = new DateOnly(2025, 4, 21),
                            ImageUrl = "/images/BulgarianFederation.jpg",
                            IsDeleted = false,
                            Location = "Stara Zagora Tennis Arena",
                            Name = "Stara Zagora U12 Cup",
                            Organizer = "Bulgarian Tennis Federation",
                            PublisherId = "7699db7d-964f-4782-8209-d76562e0fece",
                            StartDate = new DateOnly(2025, 4, 18),
                            Surface = "Hard"
                        },
                        new
                        {
                            Id = new Guid("a5f6700a-3e08-430b-9462-2b2f61d31af2"),
                            CategoryId = 6,
                            Description = "Elite tournament for U14 players across the country.",
                            EndDate = new DateOnly(2025, 7, 14),
                            ImageUrl = "/images/BulgarianFederation.jpg",
                            IsDeleted = false,
                            Location = "Blagoevgrad Tennis Club",
                            Name = "Blagoevgrad U14 Masters",
                            Organizer = "National Youth Tennis",
                            PublisherId = "7699db7d-964f-4782-8209-d76562e0fece",
                            StartDate = new DateOnly(2025, 7, 10),
                            Surface = "Clay"
                        },
                        new
                        {
                            Id = new Guid("fe9804cb-0ae2-42b6-a1fd-d90c0bc880ec"),
                            CategoryId = 7,
                            Description = "Annual national youth championship open to all categories.",
                            EndDate = new DateOnly(2025, 9, 7),
                            ImageUrl = "/images/BulgarianFederation.jpg",
                            IsDeleted = false,
                            Location = "Sofia National Center",
                            Name = "National Youth Championship",
                            Organizer = "Bulgarian Tennis Federation",
                            PublisherId = "7699db7d-964f-4782-8209-d76562e0fece",
                            StartDate = new DateOnly(2025, 9, 1),
                            Surface = "Clay"
                        },
                        new
                        {
                            Id = new Guid("0ceea4f9-b7bc-4d18-90cf-3b64b06c2a1f"),
                            CategoryId = 8,
                            Description = "Tennis Europe international event held in Albena for top U14 talents.",
                            EndDate = new DateOnly(2025, 8, 18),
                            ImageUrl = "/images/TennisEurope.jpg",
                            IsDeleted = false,
                            Location = "Albena Resort Courts",
                            Name = "Tennis Europe U14 – Albena",
                            Organizer = "Tennis Europe / BTF",
                            PublisherId = "7699db7d-964f-4782-8209-d76562e0fece",
                            StartDate = new DateOnly(2025, 8, 12),
                            Surface = "Hard"
                        },
                        new
                        {
                            Id = new Guid("c909f34e-8126-42c5-9e65-8d9c0ff0db96"),
                            CategoryId = 9,
                            Description = "International ITF Junior tournament held in Bulgaria's capital.",
                            EndDate = new DateOnly(2025, 11, 7),
                            ImageUrl = "/images/ITFJuniors.jpg",
                            IsDeleted = false,
                            Location = "Sofia, National Tennis Center",
                            Name = "ITF Juniors - Sofia",
                            Organizer = "ITF / Bulgarian Tennis Federation",
                            PublisherId = "7699db7d-964f-4782-8209-d76562e0fece",
                            StartDate = new DateOnly(2025, 11, 1),
                            Surface = "Hard"
                        },
                        new
                        {
                            Id = new Guid("a1f0c8c7-f4b3-4eb9-82e3-4f8cbf2066ee"),
                            CategoryId = 1,
                            Description = "ATP 250 series tournament on the Black Sea coast.",
                            EndDate = new DateOnly(2025, 10, 21),
                            ImageUrl = "/images/atp250.jpg",
                            IsDeleted = false,
                            Location = "Varna Tennis Club",
                            Name = "ATP 250 Varna",
                            Organizer = "Bulgarian Tennis Federation",
                            PublisherId = "7699db7d-964f-4782-8209-d76562e0fece",
                            StartDate = new DateOnly(2025, 10, 15),
                            Surface = "Hard (Outdoor)"
                        },
                        new
                        {
                            Id = new Guid("b5d3462f-7f51-4382-b57c-cc1464a68f1f"),
                            CategoryId = 2,
                            Description = "Challenger Tour event played on indoor hard court.",
                            EndDate = new DateOnly(2025, 6, 26),
                            ImageUrl = "/images/ChallengerTour.jpg",
                            IsDeleted = false,
                            Location = "Rousse Arena",
                            Name = "Challenger Rousse Open",
                            Organizer = "Rousse Tennis Association",
                            PublisherId = "7699db7d-964f-4782-8209-d76562e0fece",
                            StartDate = new DateOnly(2025, 6, 20),
                            Surface = "Hard (Indoor)"
                        },
                        new
                        {
                            Id = new Guid("dff35c76-7d20-4203-aaa1-7cb5117fd9f7"),
                            CategoryId = 4,
                            Description = "Introductory tournament for players under 10.",
                            EndDate = new DateOnly(2025, 5, 17),
                            ImageUrl = "/images/BulgarianFederation.jpg",
                            IsDeleted = false,
                            Location = "Veliko Tarnovo Tennis Park",
                            Name = "Kidz Clay Open - Veliko Tarnovo",
                            Organizer = "Youth Tennis Bulgaria",
                            PublisherId = "7699db7d-964f-4782-8209-d76562e0fece",
                            StartDate = new DateOnly(2025, 5, 15),
                            Surface = "Clay"
                        },
                        new
                        {
                            Id = new Guid("e0c9381f-f3ff-48cc-8719-30a4c649844a"),
                            CategoryId = 5,
                            Description = "Official U12 tournament on clay courts.",
                            EndDate = new DateOnly(2025, 4, 28),
                            ImageUrl = "/images/BulgarianFederation.jpg",
                            IsDeleted = false,
                            Location = "Dobrich Tennis Club",
                            Name = "U12 Green Cup – Dobrich",
                            Organizer = "Dobrich Tennis Foundation",
                            PublisherId = "7699db7d-964f-4782-8209-d76562e0fece",
                            StartDate = new DateOnly(2025, 4, 25),
                            Surface = "Clay"
                        },
                        new
                        {
                            Id = new Guid("f540e688-b37a-4061-9bc4-0d4b1bdbd1e6"),
                            CategoryId = 6,
                            Description = "Important regional tournament for U14 talents.",
                            EndDate = new DateOnly(2025, 7, 9),
                            ImageUrl = "/images/BulgarianFederation.jpg",
                            IsDeleted = false,
                            Location = "Samokov Tennis Arena",
                            Name = "Samokov U14 Cup",
                            Organizer = "Samokov Tennis League",
                            PublisherId = "7699db7d-964f-4782-8209-d76562e0fece",
                            StartDate = new DateOnly(2025, 7, 5),
                            Surface = "Hard"
                        },
                        new
                        {
                            Id = new Guid("90bb0d0a-20ae-4952-804b-bb9e3bcecb18"),
                            CategoryId = 7,
                            Description = "Team-based tournament for the best clubs nationwide.",
                            EndDate = new DateOnly(2025, 9, 20),
                            ImageUrl = "/images/BulgarianFederation.jpg",
                            IsDeleted = false,
                            Location = "Sofia Tennis Center",
                            Name = "National Juniors Teams Cup",
                            Organizer = "Bulgarian Tennis Federation",
                            PublisherId = "7699db7d-964f-4782-8209-d76562e0fece",
                            StartDate = new DateOnly(2025, 9, 15),
                            Surface = "Clay"
                        },
                        new
                        {
                            Id = new Guid("a9f5d6c3-7d5a-4a47-95ed-31080b39a04b"),
                            CategoryId = 8,
                            Description = "U16 Tennis Europe event hosted at the Black Sea coast.",
                            EndDate = new DateOnly(2025, 8, 31),
                            ImageUrl = "/images/TennisEurope.jpg",
                            IsDeleted = false,
                            Location = "Varna Tennis Arena",
                            Name = "Tennis Europe U16 – Varna",
                            Organizer = "Tennis Europe / BTF",
                            PublisherId = "7699db7d-964f-4782-8209-d76562e0fece",
                            StartDate = new DateOnly(2025, 8, 25),
                            Surface = "Hard"
                        },
                        new
                        {
                            Id = new Guid("d27a295f-2b7c-4fc1-9113-89672539e12c"),
                            CategoryId = 9,
                            Description = "High-level ITF juniors event held in Plovdiv.",
                            EndDate = new DateOnly(2025, 11, 18),
                            ImageUrl = "/images/ITFJuniors.jpg",
                            IsDeleted = false,
                            Location = "Plovdiv Tennis Arena",
                            Name = "ITF Juniors - Plovdiv",
                            Organizer = "ITF / Bulgarian Tennis Federation",
                            PublisherId = "7699db7d-964f-4782-8209-d76562e0fece",
                            StartDate = new DateOnly(2025, 11, 12),
                            Surface = "Clay"
                        });
                });

            modelBuilder.Entity("TennisLodge.Data.Models.UserTournament", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasComment("Foreign key to the user");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Foreign key to the tournament");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasComment("Shows if UserTournament entry is deleted");

                    b.HasKey("UserId", "TournamentId");

                    b.HasIndex("TournamentId");

                    b.ToTable("UserTournaments", t =>
                        {
                            t.HasComment("Join table between users and tournaments");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TennisLodge.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TennisLodge.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TennisLodge.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TennisLodge.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TennisLodge.Data.Models.Accommodation", b =>
                {
                    b.HasOne("TennisLodge.Data.Models.ApplicationUser", "HostUser")
                        .WithMany("AccommodationsOffered")
                        .HasForeignKey("HostUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("HostUser");
                });

            modelBuilder.Entity("TennisLodge.Data.Models.AccommodationRequest", b =>
                {
                    b.HasOne("TennisLodge.Data.Models.ApplicationUser", "GuestUser")
                        .WithMany("AccommodationRequests")
                        .HasForeignKey("GuestUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TennisLodge.Data.Models.Tournament", "Tournament")
                        .WithMany("AccommodationRequests")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("GuestUser");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("TennisLodge.Data.Models.PlayerProfile", b =>
                {
                    b.HasOne("TennisLodge.Data.Models.ApplicationUser", "User")
                        .WithOne("PlayerProfile")
                        .HasForeignKey("TennisLodge.Data.Models.PlayerProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TennisLodge.Data.Models.Tournament", b =>
                {
                    b.HasOne("TennisLodge.Data.Models.Category", "Category")
                        .WithMany("Tournaments")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TennisLodge.Data.Models.ApplicationUser", "Publisher")
                        .WithMany("PublishedTournaments")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Category");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("TennisLodge.Data.Models.UserTournament", b =>
                {
                    b.HasOne("TennisLodge.Data.Models.Tournament", "Tournament")
                        .WithMany("UserTournaments")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TennisLodge.Data.Models.ApplicationUser", "User")
                        .WithMany("UserTournaments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Tournament");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TennisLodge.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("AccommodationRequests");

                    b.Navigation("AccommodationsOffered");

                    b.Navigation("PlayerProfile");

                    b.Navigation("PublishedTournaments");

                    b.Navigation("UserTournaments");
                });

            modelBuilder.Entity("TennisLodge.Data.Models.Category", b =>
                {
                    b.Navigation("Tournaments");
                });

            modelBuilder.Entity("TennisLodge.Data.Models.Tournament", b =>
                {
                    b.Navigation("AccommodationRequests");

                    b.Navigation("UserTournaments");
                });
#pragma warning restore 612, 618
        }
    }
}
